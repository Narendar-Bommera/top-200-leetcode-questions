import java.util.*;

class Solution {
    private int[][][] dp;
    private String s1, s2;
    private int n;

    public boolean isScramble(String s1, String s2) {
        if (s1.length() != s2.length()) return false;
        if (s1.equals(s2)) return true;

        this.s1 = s1;
        this.s2 = s2;
        this.n = s1.length();

        dp = new int[n][n][n + 1];
        for (int[][] matrix : dp) {
            for (int[] row : matrix) {
                Arrays.fill(row, -1);
            }
        }

        return solve(0, 0, n);
    }

    private boolean solve(int i1, int i2, int len) {
        if (dp[i1][i2][len] != -1) {
            return dp[i1][i2][len] == 1;
        }

        String sub1 = s1.substring(i1, i1 + len);
        String sub2 = s2.substring(i2, i2 + len);
        if (sub1.equals(sub2)) {
            dp[i1][i2][len] = 1;
            return true;
        }

        if (!haveSameChars(sub1, sub2)) {
            dp[i1][i2][len] = 0;
            return false;
        }

        for (int k = 1; k < len; k++) {
            if (solve(i1, i2, k) && solve(i1 + k, i2 + k, len - k)) {
                dp[i1][i2][len] = 1;
                return true;
            }
            if (solve(i1, i2 + len - k, k) && solve(i1 + k, i2, len - k)) {
                dp[i1][i2][len] = 1;
                return true;
            }
        }

        dp[i1][i2][len] = 0;
        return false;
    }

    private boolean haveSameChars(String a, String b) {
        int[] count = new int[26];
        for (char c : a.toCharArray()) count[c - 'a']++;
        for (char c : b.toCharArray()) count[c - 'a']--;
        for (int x : count) {
            if (x != 0) return false;
        }
        return true;
    }
}
