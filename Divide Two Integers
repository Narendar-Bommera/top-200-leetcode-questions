import java.util.Scanner;

class Solution {
    public int divide(int dividend, int divisor) {
        // Constants for 32-bit signed integer limits
        int INT_MAX = (int) (Math.pow(2, 31) - 1);
        int INT_MIN = (int) (-Math.pow(2, 31));

        // Handle overflow edge case
        if (dividend == INT_MIN && divisor == -1) {
            return INT_MAX;
        }

        // Determine the sign of the result
        boolean negative = (dividend < 0) != (divisor < 0);

        // Work with absolute values
        long absDividend = Math.abs((long) dividend);
        long absDivisor = Math.abs((long) divisor);

        int quotient = 0;

        // Subtract divisor from dividend using bit shifts
        while (absDividend >= absDivisor) {
            long temp = absDivisor;
            int multiple = 1;
            while (absDividend >= (temp << 1)) {  // Shift left (doubling) to speed up the process
                temp <<= 1;
                multiple <<= 1;
            }
            absDividend -= temp;
            quotient += multiple;
        }

        // If the result is negative, return the negative quotient
        return negative ? -quotient : quotient;
    }

    public static void main(String[] args) {
        // Reading input from user
        Scanner scanner = new Scanner(System.in);
        
        int dividend = scanner.nextInt();
        
        int divisor = scanner.nextInt();
        
        // Create a Solution instance and compute the result
        Solution solution = new Solution();
        int result = solution.divide(dividend, divisor);

        // Output the result
        System.out.println(result);
        
        scanner.close();
    }
}
